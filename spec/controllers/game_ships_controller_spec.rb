require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe GameShipsController do

  # This should return the minimal set of attributes required to create a valid
  # GameShip. As you add validations to GameShip, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:game_id => Factory(:game).id,:ship_id => Factory(:ship).id,:hit_count => 0,:orientation => "horizontal",:sunk=> false, :x=> 0,:y=> 0}
  end

  def invalid_attributes
    {:game_id => Factory(:game).id}
  end

  describe "GET index" do
    it "assigns all game_ships as @game_ships" do
      game_ship = Factory(:game_ship)
      get :index
      assigns(:game_ships).should eq([game_ship])
    end
  end

  describe "GET show" do
    it "assigns the requested game_ship as @game_ship" do
      game_ship = Factory(:game_ship)
      get :show, :id => game_ship.id
      assigns(:game_ship).should eq(game_ship)
    end
  end

  describe "GET new" do
    it "assigns a new game_ship as @game_ship" do
      get :new
      assigns(:game_ship).should be_a_new(GameShip)
    end
  end

  describe "GET edit" do
    it "assigns the requested game_ship as @game_ship" do
      game_ship = Factory(:game_ship)
      get :edit, :id => game_ship.id
      assigns(:game_ship).should eq(game_ship)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new GameShip" do
        expect {
          xhr :post, :create, {:game_ship => valid_attributes}
        }.to change(GameShip, :count).by(1)
      end

      it "assigns a newly created game_ship as @game_ship" do
        xhr :post, :create, {:game_ship => valid_attributes}
        assigns(:game_ship).should be_a(GameShip)
        assigns(:game_ship).should be_persisted
      end

      it "redirects to the created game_ship" do
        xhr :post, :create, {:game_ship => valid_attributes}
        response.should render_template(:register)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved game_ship as @game_ship" do
        # Trigger the behavior that occurs when invalid params are submitted
        GameShip.any_instance.stub(:save).and_return(false)
        post :create, :game_ship => invalid_attributes
        assigns(:game_ship).should be_a_new(GameShip)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        GameShip.any_instance.stub(:save).and_return(false)
        post :create, :game_ship => invalid_attributes
        response.should render_template("errors.js")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested game_ship" do
        game_ship = GameShip.create! valid_attributes
        # Assuming there are no other game_ships in the database, this
        # specifies that the GameShip created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        GameShip.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => game_ship.id, :game_ship => {'these' => 'params'}
      end

      it "assigns the requested game_ship as @game_ship" do
        game_ship = GameShip.create! valid_attributes
        put :update, :id => game_ship.id, :game_ship => valid_attributes
        assigns(:game_ship).should eq(game_ship)
      end

      it "redirects to the game_ship" do
        game_ship = GameShip.create! valid_attributes
        put :update, :id => game_ship.id, :game_ship => valid_attributes
        response.should redirect_to(game_ship)
      end
    end

    #describe "with invalid params" do
    #  it "assigns the game_ship as @game_ship" do
    #    game_ship = GameShip.create! valid_attributes
    #    # Trigger the behavior that occurs when invalid params are submitted
    #    GameShip.any_instance.stub(:save).and_return(false)
    #    put :update, :id => game_ship.id, :game_ship => {}
    #    assigns(:game_ship).should eq(game_ship)
    #  end
    #
    #  it "re-renders the 'edit' template" do
    #    game_ship = GameShip.create! valid_attributes
    #    # Trigger the behavior that occurs when invalid params are submitted
    #    GameShip.any_instance.stub(:save).and_return(false)
    #    put :update, :id => game_ship.id, :game_ship => {}
    #    response.should render_template("edit")
    #  end
    #end
  end

  describe "DELETE destroy" do
    it "destroys the requested game_ship" do
      game_ship = GameShip.create! valid_attributes
      expect {
        delete :destroy, :id => game_ship.id
      }.to change(GameShip, :count).by(-1)
    end

    it "redirects to the game_ships list" do
      game_ship = GameShip.create! valid_attributes
      delete :destroy, :id => game_ship.id
      response.should redirect_to(game_ships_url)
    end
  end

end
