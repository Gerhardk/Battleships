require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe NukesController do

  # This should return the minimal set of attributes required to create a valid
  # Nuke. As you add validations to Nuke, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    game = Factory(:game)
    {"game_id"=>"#{game.id}", "x"=>"9", "y"=>"4"}
  end

  describe "GET index" do
    it "assigns all nukes as @nukes" do
      nuke = Factory.create(:nuke)
      get :index
      assigns(:nukes).should eq([nuke])
    end
  end

  describe "GET show" do
    it "assigns the requested nuke as @nuke" do
      nuke = Factory.create(:nuke)
      get :show, :id => nuke.id
      assigns(:nuke).should eq(nuke)
    end
  end

  describe "GET new" do
    it "assigns a new nuke as @nuke" do
      get :new
      assigns(:nuke).should be_a_new(Nuke)
    end
  end

  describe "GET edit" do
    it "assigns the requested nuke as @nuke" do
      nuke = Factory.create(:nuke)
      get :edit, :id => nuke.id
      assigns(:nuke).should eq(nuke)
    end
  end



  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested nuke" do
        nuke = Factory.create(:nuke)
        # Assuming there are no other nukes in the database, this
        # specifies that the Nuke created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Nuke.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => nuke.id, :nuke => {'these' => 'params'}
      end

      it "assigns the requested nuke as @nuke" do
        nuke = Factory.create(:nuke)
        put :update, :id => nuke.id, :nuke => valid_attributes
        assigns(:nuke).should eq(nuke)
      end

      it "redirects to the nuke" do
        nuke = Factory.create(:nuke)
        put :update, :id => nuke.id, :nuke => valid_attributes
        response.should redirect_to(nuke)
      end
    end


  end

  describe "DELETE destroy" do
    it "destroys the requested nuke" do
      nuke = Factory.create(:nuke)
      expect {
        delete :destroy, :id => nuke.id
      }.to change(Nuke, :count).by(-1)
    end

    it "redirects to the nukes list" do
      nuke = Factory.create(:nuke)
      delete :destroy, :id => nuke.id
      response.should redirect_to(nukes_url)
    end
  end

end
